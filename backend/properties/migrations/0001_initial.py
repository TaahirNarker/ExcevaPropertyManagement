# Generated by Django 4.2.7 on 2025-07-10 14:43

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('property_code', models.CharField(editable=False, max_length=20, unique=True)),
                ('name', models.CharField(help_text='Property name or title', max_length=200)),
                ('property_type', models.CharField(choices=[('house', 'House'), ('flat', 'Flat'), ('apartment', 'Apartment'), ('business', 'Business'), ('retail', 'Retail'), ('office', 'Office'), ('industrial', 'Industrial'), ('commercial', 'Commercial'), ('land', 'Land'), ('other', 'Other')], default='house', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Property description')),
                ('street_address', models.CharField(help_text='Street address', max_length=255)),
                ('suburb', models.CharField(blank=True, help_text='Suburb/Area', max_length=100)),
                ('city', models.CharField(help_text='City', max_length=100)),
                ('province', models.CharField(choices=[('western_cape', 'Western Cape'), ('eastern_cape', 'Eastern Cape'), ('northern_cape', 'Northern Cape'), ('free_state', 'Free State'), ('kwazulu_natal', 'KwaZulu-Natal'), ('north_west', 'North West'), ('gauteng', 'Gauteng'), ('mpumalanga', 'Mpumalanga'), ('limpopo', 'Limpopo')], help_text='Province/State', max_length=20)),
                ('postal_code', models.CharField(blank=True, help_text='Postal/ZIP code', max_length=10)),
                ('country', models.CharField(default='South Africa', max_length=50)),
                ('bedrooms', models.PositiveIntegerField(blank=True, help_text='Number of bedrooms', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('bathrooms', models.PositiveIntegerField(blank=True, help_text='Number of bathrooms', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('square_meters', models.DecimalField(blank=True, decimal_places=2, help_text='Property size in square meters', max_digits=10, null=True)),
                ('parking_spaces', models.PositiveIntegerField(blank=True, help_text='Number of parking spaces', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, help_text='Purchase price of the property', max_digits=15, null=True)),
                ('current_market_value', models.DecimalField(blank=True, decimal_places=2, help_text='Current estimated market value', max_digits=15, null=True)),
                ('monthly_rental_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly rental amount', max_digits=10, null=True)),
                ('status', models.CharField(choices=[('vacant', 'Vacant'), ('occupied', 'Occupied'), ('maintenance', 'Under Maintenance'), ('reserved', 'Reserved'), ('sold', 'Sold'), ('inactive', 'Inactive')], default='vacant', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Is this property active in the system?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('features', models.JSONField(blank=True, default=dict, help_text='Additional property features (pool, garden, etc.)')),
                ('primary_image', models.URLField(blank=True, help_text='URL to primary property image')),
                ('images', models.JSONField(blank=True, default=list, help_text='List of property image URLs')),
                ('documents', models.JSONField(blank=True, default=list, help_text='List of property document URLs')),
                ('owner', models.ForeignKey(help_text='Property owner', on_delete=django.db.models.deletion.CASCADE, related_name='owned_properties', to=settings.AUTH_USER_MODEL)),
                ('property_manager', models.ForeignKey(blank=True, help_text='Property manager (if different from owner)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_properties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property',
                'verbose_name_plural': 'Properties',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.URLField(help_text='URL to the image')),
                ('image_file', models.ImageField(blank=True, help_text='Upload image file', null=True, upload_to='property_images/')),
                ('title', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Is this the primary image?')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_images', to='properties.property')),
            ],
            options={
                'verbose_name': 'Property Image',
                'verbose_name_plural': 'Property Images',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('deed', 'Title Deed'), ('lease', 'Lease Agreement'), ('insurance', 'Insurance Policy'), ('inspection', 'Inspection Report'), ('maintenance', 'Maintenance Record'), ('tax', 'Tax Document'), ('certificate', 'Certificate'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('file_url', models.URLField(blank=True, help_text='URL to the document')),
                ('file_upload', models.FileField(blank=True, help_text='Upload document file', null=True, upload_to='property_documents/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_documents', to='properties.property')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_property_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Document',
                'verbose_name_plural': 'Property Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['property_code'], name='properties__propert_62a68c_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['status'], name='properties__status_6427a0_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['property_type'], name='properties__propert_5c7790_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['city', 'province'], name='properties__city_9f1a8e_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['owner'], name='properties__owner_i_9e1ae3_idx'),
        ),
    ]
